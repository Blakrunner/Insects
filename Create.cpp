/*****************************************************************************************/
/*  opensource
/*
/*  
/*
/* created by Blakrunner
/*****************************************************************************************/
#include "Create.hpp"
#include <unordered_map>

namespace Insect
{

void Create::create()
{
    this->assemble();

    return;
}

Create::Create(std::string type) : Transform(type)
{
}

void Create::assemble()
{
    if(this->m_type == "Ant")
    {
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(32,32,32);
        colors["highlight"] = sf::Color(48,48,48);
        colors["outline"] = sf::Color(32,32,32);
        colors["eye"] = sf::Color(48,16,16,225);
        colors["eyeHighlight"] = sf::Color(80,80,122,225);
        colors["eyeOutline"] = sf::Color(32,16,16,230);
        this->setupColors(colors);
        this->update("eyeRight0", sf::Vector2f(2,1));
        this->update("eyeLeft0", sf::Vector2f(2,1));
        this->update("gaster", sf::Vector2f(10,7.5));
        this->update("postPetoile", sf::Vector2f(5,4));
        this->update("petoile", sf::Vector2f(4,4));
        this->update("thorax", sf::Vector2f(7.5,6));
        this->update("head", sf::Vector2f(5,7.5));
        this->updateOutline("eyeRight0");
        this->updateOutline("eyeLeft0");
        this->updateOutline("gaster");
        this->updateOutline("postPetoile");
        this->updateOutline("petoile");
        this->updateOutline("thorax");
        this->updateOutline("head");
        this->updateColors("Ant");
        this->updateAntennae(sf::Color(16,16,16), sf::Vector2f(10,10));
        this->updateLegs(3, sf::Color(16,16,16), sf::Vector2f(12.5,6));
        this->updateMandibles("Ant", sf::Color(16,16,16), sf::Vector2f(5,7.5));
        this->dimpleRight("thorax", 1.0f);
        this->dimpleLeft("petoile", 0.5f);
        this->dimpleRight("petoile", 0.5f);
        this->dimpleLeft("postPetoile", 0.5f);
        this->dimpleRight("postPetoile", 0.5f);
        this->extrudeLeft("gaster", sf::Vector2f(-0.75f, 0));
        this->extrudeRight("head", sf::Vector2f(0.25f,0));
        this->rotatePart("eyeRight0", -30.f);
        this->rotatePart("eyeLeft0", 30.0f);
        this->rotatePart("legLeft2", -30.0f);
        this->rotatePart("legRight2", 30.0f);
        this->rotatePart("legLeft0", 30.0f);
        this->rotatePart("legRight0", -30.0f);
        this->translateConnected("postPetoile", "gaster", 28, 10);
        this->translateConnected("petoile", "postPetoile", 28, 10);
        this->translateConnected("thorax", "petoile", 28, 10);
        this->translateConnected("head", "thorax", 28, 10);
        this->translateConnected("eyeRight0", "head", 16, 15);
        this->translateConnected("eyeLeft0", "head", 3, 5);
        this->translateConnected("legLeft0", "thorax", 0, 34);
        this->translateConnected("legRight0", "thorax", 0, 22);
        this->translateConnected("legLeft1", "petoile", 0, 1);
        this->translateConnected("legRight1", "petoile", 0, 19);
        this->translateConnected("legLeft2", "postPetoile", 0, 35);
        this->translateConnected("legRight2", "postPetoile", 0, 21);
        this->translateConnected("mandibleLeft", "head", 0, 9);
        this->translateConnected("mandibleRight", "head", 0, 11);
        this->translateConnected("antennaeLeft", "head", 2, 6);
        this->translateConnected("antennaeRight", "head", 2, 14);
        this->updateCenter("thorax");
        HASANTENNAE = true;
        HASEIGHTLEGS = false;
        HASEYES = true;
        HASHEAD = true;
        HASLEGS = true;
        HASLEGVISIBILITY = true;
        HASMANDIBLES = true;
        HASPETOILE = true;
        HASPOSTPETOILE = true;
        HASSPOTS = false;
        HASSPOTSONGASTER = false;
        HASSPOTSONTHORAX = false;
        HASSPOTSONWINGS = false;
        HASWINGS = false;
        HASTWOSETSWINGS = false;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = false;
        HASWINGVISIBILITY = false;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }
    else if(this->m_type == "AntRed")
    {
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(192,0,0,222);
        colors["highlight"] = sf::Color(222,64,0,222);
        colors["outline"] = sf::Color(160,0,0,192);
        colors["eye"] = sf::Color(48,16,16,225);
        colors["eyeHighlight"] = sf::Color(80,80,122,225);
        colors["eyeOutline"] = sf::Color(32,16,16,192);
        this->setupColors(colors);
        this->update("eyeRight0", sf::Vector2f(2,1));
        this->update("eyeLeft0", sf::Vector2f(2,1));
        this->update("gaster", sf::Vector2f(10,7.5));
        this->update("postPetoile", sf::Vector2f(5,4));
        this->update("petoile", sf::Vector2f(4,4));
        this->update("thorax", sf::Vector2f(7.5,6));
        this->update("head", sf::Vector2f(5,7.5));
        this->updateOutline("eyeRight0");
        this->updateOutline("eyeLeft0");
        this->updateOutline("gaster");
        this->updateOutline("postPetoile");
        this->updateOutline("petoile");
        this->updateOutline("thorax");
        this->updateOutline("head");
        this->updateColors("AntRed");
        this->updateAntennae(sf::Color(160,0,0), sf::Vector2f(10,10));
        this->updateLegs(3, sf::Color(160,0,0), sf::Vector2f(12.5,6));
        this->updateMandibles("AntRed", sf::Color(160,0,0), sf::Vector2f(5,7.5));
        this->rotatePart("eyeRight0", -30.f);
        this->rotatePart("eyeLeft0", 30.0f);
        this->dimpleRight("thorax", 1.0f);
        this->dimpleLeft("petoile", 0.5f);
        this->dimpleRight("petoile", 0.5f);
        this->dimpleLeft("postPetoile", 0.5f);
        this->dimpleRight("postPetoile", 0.5f);
        this->extrudeLeft("gaster", sf::Vector2f(-0.75f, 0));
        this->extrudeRight("head", sf::Vector2f(0.25f,0));
        this->rotatePart("legLeft2", -30.0f);
        this->rotatePart("legRight2", 30.0f);
        this->rotatePart("legLeft0", 30.0f);
        this->rotatePart("legRight0", -30.0f);
        this->translateConnected("postPetoile", "gaster", 28, 10);
        this->translateConnected("petoile", "postPetoile", 28, 10);
        this->translateConnected("thorax", "petoile", 28, 10);
        this->translateConnected("head", "thorax", 28, 10);
        this->translateConnected("eyeRight0", "head", 16, 15);
        this->translateConnected("eyeLeft0", "head", 3, 5);
        this->translateConnected("legLeft0", "thorax", 0, 34);
        this->translateConnected("legRight0", "thorax", 0, 22);
        this->translateConnected("legLeft1", "petoile", 0, 1);
        this->translateConnected("legRight1", "petoile", 0, 19);
        this->translateConnected("legLeft2", "postPetoile", 0, 35);
        this->translateConnected("legRight2", "postPetoile", 0, 21);
        this->translateConnected("mandibleLeft", "head", 0, 9);
        this->translateConnected("mandibleRight", "head", 0, 11);
        this->translateConnected("antennaeLeft", "head", 2, 6);
        this->translateConnected("antennaeRight", "head", 2, 14);
        this->updateCenter("thorax");
        HASANTENNAE = true;
        HASEIGHTLEGS = false;
        HASEYES = true;
        HASHEAD = true;
        HASLEGS = true;
        HASLEGVISIBILITY = true;
        HASMANDIBLES = true;
        HASPETOILE = true;
        HASPOSTPETOILE = true;
        HASSPOTS = false;
        HASSPOTSONGASTER = false;
        HASSPOTSONTHORAX = false;
        HASSPOTSONWINGS = false;
        HASWINGS = false;
        HASTWOSETSWINGS = false;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = false;
        HASWINGVISIBILITY = false;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }
    else if(this->m_type == "Bee")
    {
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(16,16,16);
        colors["highlight"] = sf::Color(64,64,64);
        colors["outline"] = sf::Color(0,0,0);
        colors["eye"] = sf::Color(16,16,64);
        colors["eyeHighlight"] = sf::Color(80,80,128);
        colors["gaster"] = sf::Color(225,156,0);
        colors["gasterHighlight"] = sf::Color(255,192,0);
        colors["gasterOutline"] = sf::Color(16,16,16);
        colors["wing"] = sf::Color(96,96,75,75);
        colors["wingHighlight"] = sf::Color(225,225,200,75);
        colors["wingOutline"] = sf::Color(96,96,75,128);
        this->setupColors(colors);
        this->update("eyeLeft0", sf::Vector2f(7.5f,5.0f));
        this->update("eyeRight0", sf::Vector2f(7.5f,5.0f));
        this->update("wingLeft0", sf::Vector2f(25.0f,40.5f));
        this->update("wingRight0", sf::Vector2f(25.0f,40.5f));
        this->update("wingLeft1", sf::Vector2f(20.0f,30.5f));
        this->update("wingRight1", sf::Vector2f(20.0f,30.5f));
        this->update("gaster", sf::Vector2f(40.0f,25.0f));
        this->update("thorax", sf::Vector2f(25.0f,15.0f));
        this->update("head", sf::Vector2f(12.5f,17.5f));
        this->update("spot0", sf::Vector2f(3.0f,9.0f));
        this->update("spot1", sf::Vector2f(1.5f,22.0f));
        this->update("spot2", sf::Vector2f(2.5f,24.5f));
        this->update("spot3", sf::Vector2f(3.0f,25.0f));
        this->update("spot4", sf::Vector2f(8.0f,22.0f));
        this->update("spot5", sf::Vector2f(9.5f,19.0f));
        this->update("spot6", sf::Vector2f(6.5f,16.0f));
        this->update("spot7", sf::Vector2f(5.5f,12.5f));
        this->update("spot8", sf::Vector2f(3.5f,8.5f));
        this->update("spot9", sf::Vector2f(2.0f,4.5f));
        this->updateAntennae(sf::Color(75,75,75), sf::Vector2f(10,10));
        this->updateLegs(3, sf::Color(0,0,0), sf::Vector2f(25,15));
        this->updateMandibles("Bee", sf::Color(0,0,0), sf::Vector2f(5,15));
        this->rotatePart("legLeft2", -30.0f);
        this->rotatePart("legRight2", 30.0f);
        this->rotatePart("legLeft0", 30.0f);
        this->rotatePart("legRight0", -30.0f);
        this->extrudeLeft("gaster", sf::Vector2f(-2, 0));
        this->translatePartPoint("gaster", 28, sf::Vector2f(-10, 0));
        this->dimpleLeft("thorax", 2.5f);
        this->extrudeRightBottom("thorax", sf::Vector2f(0, 1));
        this->extrudeRightTop("thorax", sf::Vector2f(0, -1));
        this->dimpleRight("thorax", 2.5f);
        this->dimpleLeft("head", 1.0f);
        this->extrudeRight("head", sf::Vector2f(.5, 0));
        this->extrudeBottom("wingLeft0", sf::Vector2f(2, 5));
        this->extrudeBottom("wingLeft1", sf::Vector2f(2, 5));
        this->extrudeRightTop("wingLeft0", sf::Vector2f(0, -2));
        this->extrudeRightTop("wingLeft1", sf::Vector2f(0, -2));
        this->extrudeTop("wingRight0", sf::Vector2f(2, -5));
        this->extrudeTop("wingRight1", sf::Vector2f(2, -5));
        this->extrudeRightBottom("wingRight0", sf::Vector2f(0, 2));
        this->extrudeRightBottom("wingRight1", sf::Vector2f(0, 2));
        this->rotatePart("wingLeft0", -85.0f);
        this->rotatePart("wingLeft1", -85.0f);
        this->rotatePart("wingRight0", 85.0f);
        this->rotatePart("wingRight1", 85.0f);
        this->updateOutline("eyeRight0");
        this->updateOutline("eyeLeft0");
        this->updateOutline("wingLeft0");
        this->updateOutline("wingRight0");
        this->updateOutline("wingLeft1");
        this->updateOutline("wingRight1");
        this->updateOutline("gaster");
        this->updateOutline("thorax");
        this->updateOutline("head");
        this->updateColors("Bee");
        this->translateConnected("thorax", "gaster", 28, 10);
        this->translateConnected("wingLeft0", "thorax", 17, 3);
        this->translateConnected("wingRight0", "thorax", 3, 17);
        this->translateConnected("wingLeft1", "thorax", 17, 34);
        this->translateConnected("wingRight1", "thorax", 3, 22);
        this->translateConnected("head", "thorax", 28, 10);
        this->translateConnected("eyeRight0", "head", 19, 19);
        this->translateConnected("eyeLeft0", "head", 1, 1);
        this->translateConnected("legLeft0", "thorax", 0, 3);
        this->translateConnected("legRight0", "thorax", 0, 17);
        this->translateConnected("legLeft1", "thorax", 0, 1);
        this->translateConnected("legRight1", "thorax", 0, 19);
        this->translateConnected("legLeft2", "thorax", 0, 34);
        this->translateConnected("legRight2", "thorax", 0, 22);
        this->translateConnected("spot0", "gaster", 2, 8);
        this->translateConnected("spot1", "gaster", 1, 4);
        this->translateConnected("spot2", "gaster", 1, 2);
        this->translateConnected("spot3", "gaster", 1, 36);
        this->translateConnected("spot4", "gaster", 1, 34);
        this->translateConnected("spot5", "gaster", 1, 33);
        this->translateConnected("spot6", "gaster", 1, 32);
        this->translateConnected("spot7", "gaster", 1, 31);
        this->translateConnected("spot8", "gaster", 1, 30);
        this->translateConnected("spot9", "gaster", 2, 29);
        this->translateConnected("mandibleLeft", "head", 0, 9);
        this->translateConnected("mandibleRight", "head", 0, 11);
        this->translateConnected("antennaeLeft", "head", 2, 6);
        this->translateConnected("antennaeRight", "head", 2, 14);
        this->updateCenter("thorax");
        HASANTENNAE = true;
        HASEIGHTLEGS = false;
        HASEYES = true;
        HASHEAD = true;
        HASLEGS = true;
        HASLEGVISIBILITY = true;
        HASMANDIBLES = true;
        HASPETOILE = false;
        HASPOSTPETOILE = false;
        HASSPOTS = true;
        HASSPOTSONGASTER = true;
        HASSPOTSONTHORAX = false;
        HASSPOTSONWINGS = false;
        HASWINGS = true;
        HASTWOSETSWINGS = true;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = false;
        HASWINGVISIBILITY = true;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }
    else if(this->m_type == "Daddylonglegs")
    {
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(64,64,64,192);
        colors["highlight"] = sf::Color(96,96,96,192);
        colors["outline"] = sf::Color(32,32,32,192);
        colors["eye"] = sf::Color(5,5,5);
        colors["eyeHighlight"] = sf::Color(0,0,128);
        this->setupColors(colors);
        this->update("eyeLeft0", sf::Vector2f(0.25,0.25));
        this->update("eyeRight0", sf::Vector2f(0.25,0.25));
        this->update("eyeLeft1", sf::Vector2f(0.25,0.25));
        this->update("eyeRight1", sf::Vector2f(0.25,0.25));
        this->update("eyeLeft2", sf::Vector2f(0.25,0.25));
        this->update("eyeRight2", sf::Vector2f(0.25,0.25));
        this->update("eyeLeft3", sf::Vector2f(0.25,0.25));
        this->update("eyeRight3", sf::Vector2f(0.25,0.25));
        this->update("gaster", sf::Vector2f(15,5));
        this->update("thorax", sf::Vector2f(7.5,7.5));
        this->updateLegs(4, sf::Color(75,75,75), sf::Vector2f(25,35));
        this->updateMandibles("Spider", sf::Color(75,75,75), sf::Vector2f(2.5,2.5));
        this->m_type = "Spider";
        this->extrudeRight("thorax", sf::Vector2f(0.75, 0));
        this->m_type = "Daddylonglegs";
        this->dimpleLeft("thorax", 0.25f);
        this->dimpleRight("gaster", 0.5f);
        this->extrudeRightBottom("gaster", sf::Vector2f(0,0.5));
        this->extrudeRightTop("gaster", sf::Vector2f(0,-0.5));
        this->rotatePart("legLeft3", -30.0f);
        this->rotatePart("legRight3", 30.0f);
        this->rotatePart("legLeft2", -5.0f);
        this->rotatePart("legRight2", 5.0f);
        this->rotatePart("legLeft1", 5.0f);
        this->rotatePart("legRight1", -5.0f);
        this->rotatePart("legLeft0", 30.0f);
        this->rotatePart("legRight0", -30.0f);
        this->translateConnected("thorax", "gaster", 28, 10);
        this->translateConnected("mandibleLeft", "thorax", 0, 9);
        this->translateConnected("mandibleRight", "thorax", 0, 11);
        this->translateConnected("eyeRight0", "thorax", 10, 11, sf::Vector2f(-0.75,-0.5));
        this->translateConnected("eyeLeft0", "thorax", 10, 9, sf::Vector2f(-0.75,0.5));
        this->translateConnected("eyeRight1", "thorax", 10, 11, sf::Vector2f(-1.5,1));
        this->translateConnected("eyeLeft1", "thorax", 10, 9, sf::Vector2f(-1.5,-1));
        this->translateConnected("eyeRight2", "thorax", 10, 11, sf::Vector2f(-3,2));
        this->translateConnected("eyeLeft2", "thorax", 10, 9, sf::Vector2f(-3,-2));
        this->translateConnected("eyeRight3", "thorax", 10, 11, sf::Vector2f(-2.5,0));
        this->translateConnected("eyeLeft3", "thorax", 10, 9, sf::Vector2f(-2.5,0));
        this->translateConnected("legLeft0", "thorax", 0, 4);
        this->translateConnected("legRight0", "thorax", 0, 16);
        this->translateConnected("legLeft1", "thorax", 0, 2);
        this->translateConnected("legRight1", "thorax", 0, 18);
        this->translateConnected("legLeft2", "thorax", 0, 36);
        this->translateConnected("legRight2", "thorax", 0, 20);
        this->translateConnected("legLeft3", "thorax", 0, 33);
        this->translateConnected("legRight3", "thorax", 0, 23);
        this->updateOutline("eyeRight0");
        this->updateOutline("eyeLeft0");
        this->updateOutline("eyeRight1");
        this->updateOutline("eyeLeft1");
        this->updateOutline("eyeRight2");
        this->updateOutline("eyeLeft2");
        this->updateOutline("eyeRight3");
        this->updateOutline("eyeLeft3");
        this->updateOutline("gaster");
        this->updateOutline("thorax");
        this->updateCenter("thorax");
        this->updateColors("Spider");
        HASANTENNAE = false;
        HASEIGHTLEGS = true;
        HASEYES = true;
        HASHEAD = false;
        HASLEGS = true;
        HASLEGVISIBILITY = true;
        HASMANDIBLES = true;
        HASPETOILE = false;
        HASPOSTPETOILE = false;
        HASSPOTS = false;
        HASSPOTSONGASTER = false;
        HASSPOTSONTHORAX = false;
        HASSPOTSONWINGS = false;
        HASWINGS = false;
        HASTWOSETSWINGS = false;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = false;
        HASWINGVISIBILITY = false;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }
    else if(this->m_type == "Dragonfly")
    {
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(0,200,255);
        colors["highlight"] = sf::Color(15,15,15);
        colors["outline"] = sf::Color(15,15,15);
        colors["eye"] = sf::Color(16,64,64);
        colors["eyeHighlight"] = sf::Color(80,128,128);
        colors["gaster"] = sf::Color(255,255,200);
        colors["gasterHighlight"] = sf::Color(5,5,5);
        colors["gasterOutline"] = sf::Color(15,15,15);
        colors["head"] = sf::Color(255,255,200);
        colors["headHighlight"] = sf::Color(5,5,5);
        colors["headOutline"] = sf::Color(15,15,15);
        colors["thorax"] = sf::Color(0,200,0);
        colors["thoraxHighlight"] = sf::Color(15,15,15);
        colors["thoraxOutline"] = sf::Color(15,15,15);
        colors["wing"] = sf::Color(75,75,75,37);
        colors["wingHighlight"] = sf::Color(200,200,200,37);
        colors["wingOutline"] = sf::Color(75,75,75,128);
        this->setupColors(colors);
        this->m_outlineThickness = 2.0f;
        this->update("eyeRight0", sf::Vector2f(14,15));
        this->update("eyeLeft0", sf::Vector2f(14,15));
        this->update("wingLeft0", sf::Vector2f(35,150));
        this->update("wingRight0", sf::Vector2f(35,150));
        this->update("wingLeft1", sf::Vector2f(40,120));
        this->update("wingRight1", sf::Vector2f(40,120));
        this->update("gaster", sf::Vector2f(10,10));
        this->update("postPetoile", sf::Vector2f(20,12));
        this->update("petoile", sf::Vector2f(20,15));
        this->update("petoile1", sf::Vector2f(20,15));
        this->update("petoile2", sf::Vector2f(20,15));
        this->update("petoile3", sf::Vector2f(20,15));
        this->update("petoile4", sf::Vector2f(20,15));
        this->update("petoile5", sf::Vector2f(20,15));
        this->update("petoile6", sf::Vector2f(20,13));
        this->update("thorax", sf::Vector2f(75,25));
        this->update("head", sf::Vector2f(16,30));
        this->updateLegs(3, sf::Color(0,0,0), sf::Vector2f(60,30));
        this->updateMandibles("Dragonfly", sf::Color(0,0,0), sf::Vector2f(10,15));
        this->adjustWings("Dragonfly", "wingLeft0", 2.5f);
        this->adjustWings("Dragonfly", "wingRight0", 2.5f);
        this->adjustWings("Dragonfly", "wingLeft1", 2.5f);
        this->adjustWings("Dragonfly", "wingRight1", 2.5f);
        this->dimpleLeft("thorax", 2.0f);
        this->dimpleRight("thorax", 2.5f);
        this->extrudeRightTop("thorax", sf::Vector2f(0, -2));
        this->extrudeRightBottom("thorax", sf::Vector2f(0, 2));
        this->dimpleLeft("petoile", 1.5f);
        this->dimpleRight("petoile", 2.5f);
        for(int i = 1; i < 7; ++i)
        {
            this->dimpleLeft("petoile"+std::to_string(i), 1.0f);
            this->dimpleRight("petoile"+std::to_string(i), 1.0f);
        }
        this->dimpleLeft("postPetoile", 1.5f);
        this->dimpleRight("postPetoile", 1.5f);
        this->extrudeRightTop("gaster", sf::Vector2f(0, -1));
        this->extrudeRightBottom("gaster", sf::Vector2f(0, 1));
        this->extrudeLeftTop("gaster", sf::Vector2f(0, - 1));
        this->extrudeLeftBottom("gaster", sf::Vector2f(0, 1));
        this->extrudeLeft("gaster", sf::Vector2f(-2,0));
        this->extrudeRight("gaster", sf::Vector2f(-2,0));
        this->translatePartPoint("gaster", 28, sf::Vector2f(10, 0));
        this->translatePartPoint("gaster", 29, sf::Vector2f(-5, 0));
        this->translatePartPoint("gaster", 27, sf::Vector2f(-5, 0));
        this->translatePartPoint("gaster", 30, sf::Vector2f(-2.5, 0));
        this->translatePartPoint("gaster", 26, sf::Vector2f(-2.5, 0));
        this->extrudeRight("head", sf::Vector2f(1.0f,0));
        this->rotatePart("legLeft2", -30.0f);
        this->rotatePart("legRight2", 30.0f);
        this->rotatePart("legLeft0", 30.0f);
        this->rotatePart("legRight0", -30.0f);
        this->rotatePart("wingLeft1", -10.0f);
        this->rotatePart("wingRight1", 10.0f);
        this->updateOutline("eyeRight0");
        this->updateOutline("eyeLeft0");
        this->updateOutline("wingLeft0");
        this->updateOutline("wingRight0");
        this->updateOutline("wingLeft1");
        this->updateOutline("wingRight1");
        this->updateOutline("gaster");
        this->updateOutline("postPetoile");
        this->updateOutline("petoile");
        for(int i = 1; i < 7; ++i)
            this->updateOutline("petoile"+std::to_string(i));
        this->updateOutline("thorax");
        this->updateOutline("head");
        this->updateColors("Dragonfly");
        this->translateConnected("postPetoile", "gaster", 28, 10);
        this->translateConnected("petoile6", "postPetoile", 28, 10);
        this->translateConnected("petoile5", "petoile6", 28, 10);
        this->translateConnected("petoile4", "petoile5", 28, 10);
        this->translateConnected("petoile3", "petoile4", 28, 10);
        this->translateConnected("petoile2", "petoile3", 28, 10);
        this->translateConnected("petoile1", "petoile2", 28, 10);
        this->translateConnected("petoile", "petoile1", 28, 10);
        this->translateConnected("thorax", "petoile", 28, 10);
        this->translateConnected("head", "thorax", 28, 10);
        this->translateConnected("eyeRight0", "head", 19, 19);
        this->translateConnected("eyeLeft0", "head", 1, 1);
        this->translateConnected("wingLeft0", "thorax", 15, 1);
        this->translateConnected("wingRight0", "thorax", 5, 19);
        this->translateConnected("wingLeft1", "thorax", 15, 34);
        this->translateConnected("wingRight1", "thorax", 5, 22);
        this->translateConnected("legLeft0", "thorax", 0, 3);
        this->translateConnected("legRight0", "thorax", 0, 17);
        this->translateConnected("legLeft1", "thorax", 0, 1);
        this->translateConnected("legRight1", "thorax", 0, 19);
        this->translateConnected("legLeft2", "thorax", 0, 34);
        this->translateConnected("legRight2", "thorax", 0, 22);
        this->translateConnected("mandibleLeft", "head", 0, 9);
        this->translateConnected("mandibleRight", "head", 0, 11);
        this->updateCenter("thorax");
        HASANTENNAE = false;
        HASEIGHTLEGS = false;
        HASEYES = true;
        HASHEAD = true;
        HASLEGS = true;
        HASLEGVISIBILITY = true;
        HASMANDIBLES = true;
        HASPETOILE = true;
        HASPOSTPETOILE = true;
        HASSPOTS = false;
        HASSPOTSONGASTER = false;
        HASSPOTSONTHORAX = false;
        HASSPOTSONWINGS = false;
        HASWINGS = true;
        HASTWOSETSWINGS = true;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = false;
        HASWINGVISIBILITY = true;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }
    else if(this->m_type == "Egg")
    {
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(200,200,200);
        colors["highlight"] = sf::Color(225,225,225);
        colors["outline"] = sf::Color(192,192,192);
        this->setupColors(colors);
        this->m_outlineThickness = 0.5f;
        this->update("gaster", sf::Vector2f(3,2));
        this->updateOutline("gaster");
        this->updateCenter("gaster");
        this->updateColors("Egg");
        HASANTENNAE = false;
        HASEIGHTLEGS = false;
        HASEYES = false;
        HASHEAD = false;
        HASLEGS = false;
        HASLEGVISIBILITY = false;
        HASMANDIBLES = false;
        HASPETOILE = false;
        HASPOSTPETOILE = false;
        HASSPOTS = false;
        HASSPOTSONGASTER = false;
        HASSPOTSONTHORAX = false;
        HASSPOTSONWINGS = false;
        HASWINGS = false;
        HASTWOSETSWINGS = false;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = false;
        HASWINGVISIBILITY = false;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }
    else if(this->m_type == "Fly")
    {
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(5,5,5);
        colors["highlight"] = sf::Color(75,75,75);
        colors["outline"] = sf::Color(5,5,5);
        colors["eye"] = sf::Color(16,16,64);
        colors["eyeHighlight"] = sf::Color(80,80,128);
        colors["wing"] = sf::Color(75,75,75,128);
        colors["wingHighlight"] = sf::Color(200,200,200,75);
        colors["wingOutline"] = sf::Color(75,75,75,128);
        this->setupColors(colors);
        this->update("eyeRight0", sf::Vector2f(4,4));
        this->update("eyeLeft0", sf::Vector2f(4,4));
        this->update("wingLeft0", sf::Vector2f(10,20));
        this->update("wingRight0", sf::Vector2f(10,20));
        this->update("gaster", sf::Vector2f(15,12.5));
        this->update("petoile", sf::Vector2f(8,12.5));
        this->update("thorax", sf::Vector2f(5,12.5));
        this->update("head", sf::Vector2f(4,12));
        this->updateLegs(3, sf::Color(15,15,15), sf::Vector2f(12.5,6));
        this->updateMandibles("Fly", sf::Color(15,15,15), sf::Vector2f(5,7.5));
        this->adjustWings("Fly", "wingLeft0", 1.5f);
        this->adjustWings("Fly", "wingRight0", 1.5f);
        this->dimpleRight("thorax", 0.75f);
        this->dimpleLeft("thorax", 0.5f);
        this->dimpleRight("petoile", 0.5f);
        this->dimpleLeft("petoile", 0.75f);
        this->dimpleRight("gaster", 1.5f);
        this->extrudeLeft("gaster", sf::Vector2f(-1.5f,0));
        this->extrudeRight("head", sf::Vector2f(0.5f,0));
        this->rotatePart("legLeft2", -30.0f);
        this->rotatePart("legRight2", 30.0f);
        this->rotatePart("legLeft0", 25.0f);
        this->rotatePart("legRight0", -25.0f);
        this->rotatePart("wingLeft0", -75.0f);
        this->rotatePart("wingRight0", 75.0f);
        this->updateOutline("eyeRight0");
        this->updateOutline("eyeLeft0");
        this->updateOutline("wingLeft0");
        this->updateOutline("wingRight0");
        this->updateOutline("gaster");
        this->updateOutline("petoile");
        this->updateOutline("thorax");
        this->updateOutline("head");
        this->updateColors("Fly");
        this->translateConnected("petoile", "gaster", 28, 10);
        this->translateConnected("thorax", "petoile", 28, 10);
        this->translateConnected("wingLeft0", "petoile", 18, 4);
        this->translateConnected("wingRight0", "petoile", 2, 16);
        this->translateConnected("head", "thorax", 28, 10);
        this->translateConnected("eyeRight0", "head", 20, 19);
        this->translateConnected("eyeLeft0", "head", 36, 1);
        this->translateConnected("legLeft0", "thorax", 0, 32);
        this->translateConnected("legRight0", "thorax", 0, 24);
        this->translateConnected("legLeft1", "petoile", 0, 2);
        this->translateConnected("legRight1", "petoile", 0, 18);
        this->translateConnected("legLeft2", "petoile", 0, 32);
        this->translateConnected("legRight2", "petoile", 0, 24);
        this->translateConnected("mandibleLeft", "head", 0, 9);
        this->translateConnected("mandibleRight", "head", 0, 11);
        this->updateCenter("thorax");
        HASANTENNAE = false;
        HASEIGHTLEGS = false;
        HASEYES = true;
        HASHEAD = true;
        HASLEGS = true;
        HASLEGVISIBILITY = true;
        HASMANDIBLES = true;
        HASPETOILE = true;
        HASPOSTPETOILE = false;
        HASSPOTS = false;
        HASSPOTSONGASTER = false;
        HASSPOTSONTHORAX = false;
        HASSPOTSONWINGS = false;
        HASWINGS = true;
        HASTWOSETSWINGS = false;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = false;
        HASWINGVISIBILITY = true;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }
    else if(this->m_type == "Grasshopper")
    {
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(0,200,0);
        colors["highlight"] = sf::Color(0,255,0);
        colors["outline"] = sf::Color(0,156,0);
        colors["eye"] = sf::Color(16,64,16);
        colors["eyeHighlight"] = sf::Color(80,128,80);
        colors["wing"] = sf::Color(128,128,128,75);
        colors["wingHighlight"] = sf::Color(200,200,200,75);
        colors["wingOutline"] = sf::Color(75,75,75,128);
        this->setupColors(colors);
        this->update("eyeRight0", sf::Vector2f(2,2));
        this->update("eyeLeft0", sf::Vector2f(2,2));
        this->update("gaster", sf::Vector2f(30,5));
        this->update("thorax", sf::Vector2f(15,5));
        this->update("head", sf::Vector2f(5,5));
        this->updateLegs(3, sf::Color(0,156,0), sf::Vector2f(30,15));
        this->dimpleRight("thorax", 0.75f);
        this->dimpleLeft("thorax", 0.5f);
        this->dimpleRight("gaster", 1.5f);
        this->extrudeRight("head", sf::Vector2f(0,2));
        this->scalePart("legLeft0", sf::Vector2f(0.5,0.5));
        this->scalePart("legRight0", sf::Vector2f(0.5,0.5));
        this->scalePart("legLeft1", sf::Vector2f(0.5,0.5));
        this->scalePart("legRight1", sf::Vector2f(0.5,0.5));
        this->rotatePart("legLeft2", -60.0f);
        this->rotatePart("legRight2", 60.0f);
        this->rotatePart("legLeft0", 25.0f);
        this->rotatePart("legRight0", -25.0f);
        this->translateConnected("thorax", "gaster", 28, 10);
        this->translateConnected("head", "thorax", 28, 10);
        this->translateConnected("eyeRight0", "head", 20, 19);
        this->translateConnected("eyeLeft0", "head", 36, 1);
        this->translateConnected("legLeft0", "thorax", 0, 3);
        this->translateConnected("legRight0", "thorax", 0, 17);
        this->translateConnected("legLeft1", "thorax", 0, 1);
        this->translateConnected("legRight1", "thorax", 0, 19);
        this->translateConnected("legLeft2", "thorax", 0, 34);
        this->translateConnected("legRight2", "thorax", 0, 22);
        this->updateOutline("eyeRight0");
        this->updateOutline("eyeLeft0");
        this->updateOutline("gaster");
        this->updateOutline("thorax");
        this->updateOutline("head");
        this->updateColors("Grasshopper");
        this->updateCenter("thorax");
        HASANTENNAE = false;
        HASEIGHTLEGS = false;
        HASEYES = true;
        HASHEAD = true;
        HASLEGS = true;
        HASLEGVISIBILITY = true;
        HASMANDIBLES = false;
        HASPETOILE = false;
        HASPOSTPETOILE = false;
        HASSPOTS = false;
        HASSPOTSONGASTER = false;
        HASSPOTSONTHORAX = false;
        HASSPOTSONWINGS = false;
        HASWINGS = false;
        HASTWOSETSWINGS = false;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = false;
        HASWINGVISIBILITY = false;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }
    else if(this->m_type == "Hatchling")
    {
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(200,200,200);
        colors["highlight"] = sf::Color(225,225,225);
        colors["outline"] = sf::Color(192,192,192);
        this->setupColors(colors);
        this->m_outlineThickness = 0.5f;
        this->update("gaster", sf::Vector2f(5,3));
        this->update("thorax", sf::Vector2f(2,3));
        this->update("head", sf::Vector2f(3,2));
        this->dimpleRight("gaster", 0.25f);
        this->dimpleLeft("thorax", 0.25f);
        this->dimpleRight("thorax", 0.25f);
        this->dimpleLeft("head", 0.25f);
        this->translateConnected("thorax", "gaster", 28, 10);
        this->translateConnected("head", "thorax", 28, 10);
        this->updateOutline("gaster");
        this->updateOutline("thorax");
        this->updateOutline("head");
        this->updateColors("Hatchling");
        this->updateCenter("thorax");
        HASANTENNAE = false;
        HASEIGHTLEGS = false;
        HASEYES = false;
        HASHEAD = true;
        HASLEGS = false;
        HASLEGVISIBILITY = false;
        HASMANDIBLES = false;
        HASPETOILE = false;
        HASPOSTPETOILE = false;
        HASSPOTS = false;
        HASSPOTSONGASTER = false;
        HASSPOTSONTHORAX = false;
        HASSPOTSONWINGS = false;
        HASWINGS = false;
        HASTWOSETSWINGS = false;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = false;
        HASWINGVISIBILITY = false;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }
    else if(this->m_type == "Ladybug")
    {
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(16,16,16);
        colors["highlight"] = sf::Color(64,64,64);
        colors["outline"] = sf::Color(0,0,0);
        colors["eye"] = sf::Color(16,16,64);
        colors["eyeHighlight"] = sf::Color(80,80,128);
        colors["spot"] = sf::Color(16,16,16);
        colors["spotHighlight"] = sf::Color(64,64,64);
        colors["topWing"] = sf::Color(255,0,0);
        colors["topWingHighlight"] = sf::Color(255,64,0);
        colors["topWingOutline"] = sf::Color(192,0,0);
        colors["wing"] = sf::Color(75,75,75,75);
        colors["wingHighlight"] = sf::Color(200,200,200,75);
        colors["wingOutline"] = sf::Color(75,75,75,128);
        this->setupColors(colors);
        this->update("eyeRight0", sf::Vector2f(5,5));
        this->update("eyeLeft0", sf::Vector2f(5,5));
        this->update("gaster", sf::Vector2f(10,15));
        this->update("thorax", sf::Vector2f(10,17.5));
        this->update("head", sf::Vector2f(7.5,17));
        this->update("wingLeft0", sf::Vector2f(15,15));
        this->update("wingRight0", sf::Vector2f(15,15));
        this->update("spot0", sf::Vector2f(2.5,2.5));
        this->update("spot1", sf::Vector2f(2,2));
        this->update("spot2", sf::Vector2f(3,3));
        this->update("spot3", sf::Vector2f(2,2));
        this->update("spot4", sf::Vector2f(3,3));
        this->update("spot5", sf::Vector2f(2.5,2.5));
        this->update("spot6", sf::Vector2f(2,2));
        this->update("spot7", sf::Vector2f(3,3));
        this->update("spot8", sf::Vector2f(2,2));
        this->update("spot9", sf::Vector2f(3,3));
        this->update("spot10", sf::Vector2f(2.5,2.5));
        this->updateQuarterCircle("topWingLeft", sf::Vector2f(25,20));
        this->updateQuarterCircle("topWingRight", sf::Vector2f(25,20));
        this->updateLegs(3, sf::Color(0,0,0), sf::Vector2f(5,5));
        this->updateMandibles("Ladybug", sf::Color(0,0,0), sf::Vector2f(5,5));
        this->extrudeBottom("wingLeft0", sf::Vector2f(0,5));
        this->extrudeTop("wingRight0", sf::Vector2f(0,-5));
        this->extrudeRight("head", sf::Vector2f(1,0));
        this->dimpleLeft("head", 1.0f);
        this->extrudeRightBottom("thorax", sf::Vector2f(0,1));
        this->extrudeRightTop("thorax", sf::Vector2f(0,-1));
        this->dimpleRight("thorax", 1.5f);
        this->dimpleLeft("thorax", 0.5f);
        this->dimpleRight("gaster", 1.5f);
        this->rotatePart("legLeft0", 30.0f);
        this->rotatePart("legRight0", -30.0f);
        this->rotatePart("legLeft2", -30.0f);
        this->rotatePart("legRight2", 30.0f);
        this->rotatePart("wingLeft0", -95.0f);
        this->rotatePart("wingRight0", 95.0f);
        this->translateConnected("thorax", "gaster", 28, 10);
        this->translateConnected("wingLeft0", "gaster", 17, 3);
        this->translateConnected("wingRight0", "gaster", 3, 17);
        this->translateConnected("topWingLeft", "thorax", 11, 3);
        this->translateConnected("topWingRight", "thorax", 1, 17);
        this->translateConnected("spot0", "gaster", 28, 30);
        this->translateConnected("spot1", "topWingLeft", 10, 6, sf::Vector2f(3,3.5));
        this->translateConnected("spot2", "topWingLeft", 10, 8, sf::Vector2f(3,5));
        this->translateConnected("spot3", "topWingLeft", 10, 10, sf::Vector2f(1,5));
        this->translateConnected("spot4", "gaster", 9, 9);
        this->translateConnected("spot5", "gaster", 28, 20, sf::Vector2f(3,-2));
        this->translateConnected("spot6", "topWingRight", 18, 8, sf::Vector2f(3,-3));
        this->translateConnected("spot7", "topWingRight", 18, 6, sf::Vector2f(3,-5));
        this->translateConnected("spot8", "topWingRight", 18, 3, sf::Vector2f(2,-4));
        this->translateConnected("spot9", "gaster", 10, 13);
        this->translateConnected("spot10", "gaster", 28, 28, sf::Vector2f(8,-2));
        this->translateConnected("head", "thorax", 28, 10);
        this->translateConnected("eyeRight0", "head", 16, 16);
        this->translateConnected("eyeLeft0", "head", 4, 4);
        this->translateConnected("legLeft0", "thorax", 2, 3);
        this->translateConnected("legRight0", "thorax", 2, 17);
        this->translateConnected("legLeft1", "thorax", 2, 1);
        this->translateConnected("legRight1", "thorax", 2, 19);
        this->translateConnected("legLeft2", "thorax", 2, 34);
        this->translateConnected("legRight2", "thorax", 2, 22);
        this->translateConnected("mandibleLeft", "head", 0, 9);
        this->translateConnected("mandibleRight", "head", 0, 11);
        this->updateOutline("eyeRight0");
        this->updateOutline("eyeLeft0");
        this->updateOutline("gaster");
        this->updateOutline("thorax");
        this->updateOutline("head");
        this->updateOutline("wingLeft0");
        this->updateOutline("wingRight0");
//        this->updateOutline("topWingLeft");
//        this->updateOutline("topWingRight");
        this->updateColors("Ladybug");
        this->updateCenter("thorax");
        HASANTENNAE = false;
        HASEIGHTLEGS = false;
        HASEYES = true;
        HASHEAD = true;
        HASLEGS = true;
        HASLEGVISIBILITY = true;
        HASMANDIBLES = true;
        HASPETOILE = false;
        HASPOSTPETOILE = false;
        HASSPOTS = true;
        HASSPOTSONGASTER = false;
        HASSPOTSONTHORAX = false;
        HASSPOTSONWINGS = false;
        HASWINGS = true;
        HASTWOSETSWINGS = false;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = true;
        HASWINGVISIBILITY = false;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }
    else if(this->m_type == "Larva")
    {
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(200,200,200);
        colors["highlight"] = sf::Color(225,225,225);
        colors["outline"] = sf::Color(192,192,192);
        this->setupColors(colors);
        this->m_outlineThickness = 0.5f;
        this->update("eyeRight0", sf::Vector2f(1,0.5));
        this->update("eyeLeft0", sf::Vector2f(1,0.5));
        this->update("gaster", sf::Vector2f(4,3));
        this->update("thorax", sf::Vector2f(5,4.5));
        this->update("head", sf::Vector2f(2.5,5));
        this->updateOutline("eyeRight0");
        this->updateOutline("eyeLeft0");
        this->updateOutline("gaster");
        this->updateOutline("thorax");
        this->updateOutline("head");
        this->updateColors("Larva");
        this->dimpleRight("thorax", 0.25f);
        this->dimpleLeft("thorax", 0.25f);
        this->dimpleRight("gaster", 0.25f);
        this->extrudeLeft("gaster", sf::Vector2f(-0.5f,0));
        this->dimpleLeft("head", 0.25f);
        this->extrudeRight("head", sf::Vector2f(0.5f,0));
        this->translateConnected("thorax", "gaster", 28, 10);
        this->translateConnected("head", "thorax", 28, 10);
        this->translateConnected("eyeRight0", "head", 16, 15);
        this->translateConnected("eyeLeft0", "head", 3, 5);
        this->updateCenter("thorax");
        HASANTENNAE = false;
        HASEIGHTLEGS = false;
        HASEYES = true;
        HASHEAD = true;
        HASLEGS = false;
        HASLEGVISIBILITY = false;
        HASMANDIBLES = true;
        HASPETOILE = false;
        HASPOSTPETOILE = false;
        HASSPOTS = false;
        HASSPOTSONGASTER = false;
        HASSPOTSONTHORAX = false;
        HASSPOTSONWINGS = false;
        HASWINGS = false;
        HASTWOSETSWINGS = false;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = false;
        HASWINGVISIBILITY = false;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }
    else if(this->m_type == "LarvaOne")
    {
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(200,200,200);
        colors["highlight"] = sf::Color(225,225,225);
        colors["outline"] = sf::Color(192,192,192);
        this->setupColors(colors);
        this->m_outlineThickness = 0.5f;
        this->update("eyeRight0", sf::Vector2f(1,0.5));
        this->update("eyeLeft0", sf::Vector2f(1,0.5));
        this->update("gaster", sf::Vector2f(4,3));
        this->update("thorax", sf::Vector2f(5,4.5));
        this->update("head", sf::Vector2f(2.5,5));
        this->updateOutline("eyeRight0");
        this->updateOutline("eyeLeft0");
        this->updateOutline("gaster");
        this->updateOutline("thorax");
        this->updateOutline("head");
        this->updateColors("LarvaOne");
        this->dimpleRight("thorax", 0.25f);
        this->dimpleLeft("thorax", 0.25f);
        this->dimpleRight("gaster", 0.25f);
        this->extrudeLeft("gaster", sf::Vector2f(-0.5f,0));
        this->dimpleLeft("head", 0.25f);
        this->extrudeRight("head", sf::Vector2f(0.5f,0));
        this->translateConnected("thorax", "gaster", 28, 10);
        this->translateConnected("head", "thorax", 28, 10);
        this->translateConnected("eyeRight0", "head", 16, 15);
        this->translateConnected("eyeLeft0", "head", 3, 5);
        this->updateCenter("thorax");
        HASANTENNAE = false;
        HASEIGHTLEGS = false;
        HASEYES = true;
        HASHEAD = true;
        HASLEGS = false;
        HASLEGVISIBILITY = false;
        HASMANDIBLES = true;
        HASPETOILE = false;
        HASPOSTPETOILE = false;
        HASSPOTS = false;
        HASSPOTSONGASTER = false;
        HASSPOTSONTHORAX = false;
        HASSPOTSONWINGS = false;
        HASWINGS = false;
        HASTWOSETSWINGS = false;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = false;
        HASWINGVISIBILITY = false;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }
    else if(this->m_type == "LarvaMed")
    {
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(200,200,200);
        colors["highlight"] = sf::Color(225,225,225);
        colors["outline"] = sf::Color(192,192,192);
        this->setupColors(colors);
        this->m_outlineThickness = 0.5f;
        this->update("eyeRight0", sf::Vector2f(1,0.5));
        this->update("eyeLeft0", sf::Vector2f(1,0.5));
        this->update("gaster", sf::Vector2f(4,3));
        this->update("petoile", sf::Vector2f(5,4));
        this->update("thorax", sf::Vector2f(5,4.5));
        this->update("head", sf::Vector2f(2.5,5));
        this->updateOutline("eyeRight0");
        this->updateOutline("eyeLeft0");
        this->updateOutline("gaster");
        this->updateOutline("petoile");
        this->updateOutline("thorax");
        this->updateOutline("head");
        this->updateColors("LarvaMed");
        this->dimpleRight("thorax", 0.25f);
        this->dimpleLeft("thorax", 0.25f);
        this->dimpleRight("petoile", 0.25f);
        this->dimpleLeft("petoile", 0.25f);
        this->dimpleRight("gaster", 0.25f);
        this->extrudeLeft("gaster", sf::Vector2f(-0.5f,0));
        this->dimpleLeft("head", 0.25f);
        this->extrudeRight("head", sf::Vector2f(0.5f,0));
        this->translateConnected("petoile", "gaster", 28, 10);
        this->translateConnected("thorax", "petoile", 28, 10);
        this->translateConnected("head", "thorax", 28, 10);
        this->translateConnected("eyeRight0", "head", 16, 15);
        this->translateConnected("eyeLeft0", "head", 3, 5);
        this->updateCenter("thorax");
        HASANTENNAE = false;
        HASEIGHTLEGS = false;
        HASEYES = true;
        HASHEAD = true;
        HASLEGS = false;
        HASLEGVISIBILITY = false;
        HASMANDIBLES = true;
        HASPETOILE = true;
        HASPOSTPETOILE = false;
        HASSPOTS = false;
        HASSPOTSONGASTER = false;
        HASSPOTSONTHORAX = false;
        HASSPOTSONWINGS = false;
        HASWINGS = false;
        HASTWOSETSWINGS = false;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = false;
        HASWINGVISIBILITY = false;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }
    else if(this->m_type == "LarvaFull")
    {
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(200,200,200);
        colors["highlight"] = sf::Color(225,225,225);
        colors["outline"] = sf::Color(192,192,192);
        this->setupColors(colors);
        this->m_outlineThickness = 0.5f;
        this->update("eyeRight0", sf::Vector2f(1,0.5));
        this->update("eyeLeft0", sf::Vector2f(1,0.5));
        this->update("gaster", sf::Vector2f(4,3));
        this->update("postPetoile", sf::Vector2f(4,3.5));
        this->update("petoile", sf::Vector2f(5,4));
        this->update("thorax", sf::Vector2f(5,4.5));
        this->update("head", sf::Vector2f(2.5,5));
        this->updateOutline("eyeRight0");
        this->updateOutline("eyeLeft0");
        this->updateOutline("gaster");
        this->updateOutline("postPetoile");
        this->updateOutline("petoile");
        this->updateOutline("thorax");
        this->updateOutline("head");
        this->updateColors("LarvaFull");
        this->dimpleRight("thorax", 0.25f);
        this->dimpleLeft("thorax", 0.25f);
        this->dimpleRight("petoile", 0.25f);
        this->dimpleLeft("petoile", 0.25f);
        this->dimpleRight("postPetoile", 0.25f);
        this->dimpleLeft("postPetoile", 0.25f);
        this->dimpleRight("gaster", 0.25f);
        this->extrudeLeft("gaster", sf::Vector2f(-0.5f,0));
        this->dimpleLeft("head", 0.25f);
        this->extrudeRight("head", sf::Vector2f(0.5f,0));
        this->translateConnected("postPetoile", "gaster", 28, 10);
        this->translateConnected("petoile", "postPetoile", 28, 10);
        this->translateConnected("thorax", "petoile", 28, 10);
        this->translateConnected("head", "thorax", 28, 10);
        this->translateConnected("eyeRight0", "head", 16, 15);
        this->translateConnected("eyeLeft0", "head", 3, 5);
        this->updateCenter("thorax");
        HASANTENNAE = false;
        HASEIGHTLEGS = false;
        HASEYES = true;
        HASHEAD = true;
        HASLEGS = false;
        HASLEGVISIBILITY = false;
        HASMANDIBLES = true;
        HASPETOILE = true;
        HASPOSTPETOILE = true;
        HASSPOTS = false;
        HASSPOTSONGASTER = false;
        HASSPOTSONTHORAX = false;
        HASSPOTSONWINGS = false;
        HASWINGS = false;
        HASTWOSETSWINGS = false;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = false;
        HASWINGVISIBILITY = false;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }
    else if(this->m_type == "Mosquito")
    {
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(75,75,75);
        colors["highlight"] = sf::Color(155,155,155);
        colors["outline"] = sf::Color(5,5,5);
        colors["wing"] = sf::Color(75,75,75,128);
        colors["wingHighlight"] = sf::Color(200,200,200,75);
        colors["wingOutline"] = sf::Color(75,75,75,128);
        this->setupColors(colors);
        this->m_outlineThickness = 0.25f;
        this->update("eyeRight0", sf::Vector2f(1,1));
        this->update("eyeLeft0", sf::Vector2f(1,1));
        this->update("wingLeft0", sf::Vector2f(3,10));
        this->update("wingRight0", sf::Vector2f(3,10));
        this->update("gaster", sf::Vector2f(7.5,3));
        this->update("thorax", sf::Vector2f(5.5,3));
        this->update("head", sf::Vector2f(2,3));
        this->updateAntennae(sf::Color(75,75,75), sf::Vector2f(10,10));
        this->updateLegs(3, sf::Color(75,75,75), sf::Vector2f(12.5,6));
        this->updateMandibles("Mosquito", sf::Color(75,75,75), sf::Vector2f(5,7.5));
        this->adjustWings("Mosquito", "wingLeft0", 1.25f);
        this->adjustWings("Mosquito", "wingRight0", 1.25f);
        this->dimpleRight("thorax", 0.125f);
        this->extrudeLeft("gaster", sf::Vector2f(-0.75f, 0));
        this->extrudeRight("head", sf::Vector2f(0.25f,0));
        this->rotatePart("legLeft2", -30.0f);
        this->rotatePart("legRight2", 30.0f);
        this->rotatePart("legLeft0", 30.0f);
        this->rotatePart("legRight0", -30.0f);
        this->rotatePart("wingLeft0", -95.0f);
        this->rotatePart("wingRight0", 95.0f);
        this->updateOutline("eyeRight0");
        this->updateOutline("eyeLeft0");
        this->updateOutline("wingLeft0");
        this->updateOutline("wingRight0");
        this->updateOutline("gaster");
        this->updateOutline("thorax");
        this->updateOutline("head");
        this->updateColors("Mosquito");
        this->translateConnected("thorax", "gaster", 28, 10);
        this->translateConnected("wingLeft0", "thorax", 17, 3);
        this->translateConnected("wingRight0", "thorax", 3, 17);
        this->translateConnected("head", "thorax", 28, 10);
        this->translateConnected("eyeRight0", "head", 16, 15);
        this->translateConnected("eyeLeft0", "head", 3, 5);
        this->translateConnected("legLeft0", "thorax", 0, 3);
        this->translateConnected("legRight0", "thorax", 0, 17);
        this->translateConnected("legLeft1", "thorax", 0, 1);
        this->translateConnected("legRight1", "thorax", 0, 19);
        this->translateConnected("legLeft2", "thorax", 0, 34);
        this->translateConnected("legRight2", "thorax", 0, 22);
        this->translateConnected("mandibleLeft", "head", 0, 9);
        this->translateConnected("mandibleRight", "head", 0, 11);
        this->translateConnected("antennaeLeft", "head", 2, 6);
        this->translateConnected("antennaeRight", "head", 2, 14);
        this->updateCenter("thorax");
        HASANTENNAE = true;
        HASEIGHTLEGS = false;
        HASEYES = true;
        HASHEAD = true;
        HASLEGS = true;
        HASLEGVISIBILITY = true;
        HASMANDIBLES = true;
        HASPETOILE = false;
        HASPOSTPETOILE = false;
        HASSPOTS = false;
        HASSPOTSONGASTER = false;
        HASSPOTSONTHORAX = false;
        HASSPOTSONWINGS = false;
        HASWINGS = true;
        HASTWOSETSWINGS = false;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = false;
        HASWINGVISIBILITY = true;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }
    else if(this->m_type == "Spider")
    {
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(64,64,64);
        colors["highlight"] = sf::Color(96,96,96);
        colors["outline"] = sf::Color(32,32,32);
        colors["eye"] = sf::Color(5,5,5);
        colors["eyeHighlight"] = sf::Color(0,0,128);
        this->setupColors(colors);
        this->update("eyeLeft0", sf::Vector2f(1,1));
        this->update("eyeRight0", sf::Vector2f(1,1));
        this->update("eyeLeft1", sf::Vector2f(1,1));
        this->update("eyeRight1", sf::Vector2f(1,1));
        this->update("eyeLeft2", sf::Vector2f(1,1));
        this->update("eyeRight2", sf::Vector2f(1,1));
        this->update("eyeLeft3", sf::Vector2f(1,1));
        this->update("eyeRight3", sf::Vector2f(1,1));
        this->update("gaster", sf::Vector2f(60,42.5));
        this->update("thorax", sf::Vector2f(30,30));
        this->updateLegs(4, sf::Color(75,75,75), sf::Vector2f(25,25));
        this->updateMandibles("Spider", sf::Color(75,75,75), sf::Vector2f(5,5));
        this->extrudeRight("thorax", sf::Vector2f(1.5, 0));
        this->dimpleLeft("thorax", 2.5f);
        this->dimpleRight("gaster", 3.0f);
        this->rotatePart("legLeft3", -30.0f);
        this->rotatePart("legRight3", 30.0f);
        this->rotatePart("legLeft2", -5.0f);
        this->rotatePart("legRight2", 5.0f);
        this->rotatePart("legLeft1", 5.0f);
        this->rotatePart("legRight1", -5.0f);
        this->rotatePart("legLeft0", 30.0f);
        this->rotatePart("legRight0", -30.0f);
        this->translateConnected("thorax", "gaster", 28, 10);
        this->translateConnected("mandibleLeft", "thorax", 0, 9);
        this->translateConnected("mandibleRight", "thorax", 0, 11);
        this->translateConnected("eyeRight0", "thorax", 10, 11);
        this->translateConnected("eyeLeft0", "thorax", 10, 9);
        this->translateConnected("eyeRight1", "thorax", 10, 11, sf::Vector2f(-3,0));
        this->translateConnected("eyeLeft1", "thorax", 10, 9, sf::Vector2f(-3,0));
        this->translateConnected("eyeRight2", "thorax", 10, 11, sf::Vector2f(-6,0));
        this->translateConnected("eyeLeft2", "thorax", 10, 9, sf::Vector2f(-6,0));
        this->translateConnected("eyeRight3", "thorax", 10, 11, sf::Vector2f(-9,0));
        this->translateConnected("eyeLeft3", "thorax", 10, 9, sf::Vector2f(-9,0));
        this->translateConnected("legLeft0", "thorax", 0, 4);
        this->translateConnected("legRight0", "thorax", 0, 16);
        this->translateConnected("legLeft1", "thorax", 0, 2);
        this->translateConnected("legRight1", "thorax", 0, 18);
        this->translateConnected("legLeft2", "thorax", 0, 36);
        this->translateConnected("legRight2", "thorax", 0, 20);
        this->translateConnected("legLeft3", "thorax", 0, 33);
        this->translateConnected("legRight3", "thorax", 0, 23);
        this->updateOutline("eyeRight0");
        this->updateOutline("eyeLeft0");
        this->updateOutline("eyeRight1");
        this->updateOutline("eyeLeft1");
        this->updateOutline("eyeRight2");
        this->updateOutline("eyeLeft2");
        this->updateOutline("eyeRight3");
        this->updateOutline("eyeLeft3");
        this->updateOutline("gaster");
        this->updateOutline("thorax");
        this->updateCenter("thorax");
        this->updateColors("Spider");
        HASANTENNAE = false;
        HASEIGHTLEGS = true;
        HASEYES = true;
        HASHEAD = false;
        HASLEGS = true;
        HASLEGVISIBILITY = true;
        HASMANDIBLES = true;
        HASPETOILE = false;
        HASPOSTPETOILE = false;
        HASSPOTS = false;
        HASSPOTSONGASTER = false;
        HASSPOTSONTHORAX = false;
        HASSPOTSONWINGS = false;
        HASWINGS = false;
        HASTWOSETSWINGS = false;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = false;
        HASWINGVISIBILITY = false;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }
    else if(this->m_type == "Wasp")
    {
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(255,128,0);
        colors["highlight"] = sf::Color(255,192,64);
        colors["outline"] = sf::Color(64,32,0);
        colors["eye"] = sf::Color(16,16,64);
        colors["eyeHighlight"] = sf::Color(80,80,128);
        colors["wing"] = sf::Color(75,75,75,128);
        colors["wingHighlight"] = sf::Color(200,200,200,75);
        colors["wingOutline"] = sf::Color(75,75,75,128);
        this->setupColors(colors);
        this->update("eyeRight0", sf::Vector2f(4.0f,3.5f));
        this->update("eyeLeft0", sf::Vector2f(4.0f,3.5f));
        this->update("gaster", sf::Vector2f(45.0f,20.0f));
        this->update("thorax", sf::Vector2f(25.0f,20.0f));
        this->update("head", sf::Vector2f(7.5f,17.5f));
        this->update("wingLeft0", sf::Vector2f(15.0f,52.5f));
        this->update("wingRight0", sf::Vector2f(15.0f,52.5f));
        this->update("wingLeft1", sf::Vector2f(10.0f,32.5f));
        this->update("wingRight1", sf::Vector2f(10.0f,32.5f));
        this->update("spot0", sf::Vector2f(13, 1));
        this->update("spot1", sf::Vector2f(1, 17.5));
        this->update("spot2", sf::Vector2f(23, 1));
        this->update("spot3", sf::Vector2f(1.5f,19.0f));
        this->update("spot4", sf::Vector2f(2.0f,20.0f));
        this->update("spot5", sf::Vector2f(2.0f,20.0f));
        this->update("spot6", sf::Vector2f(1.5f,15.5f));
        this->update("spot7", sf::Vector2f(43, 1));
        this->update("spot8", sf::Vector2f(1.5f,13.0f));
        this->update("spot9", sf::Vector2f(2.0f,17.0f));
        this->update("spot10", sf::Vector2f(2.5f,20.0f));
        this->update("spot11", sf::Vector2f(3.0f,20.0f));
        this->update("spot12", sf::Vector2f(2.5f,18.0f));
        this->update("spot13", sf::Vector2f(2.0f,13.0f));
        this->update("spot14", sf::Vector2f(1.5f,7.0f));
        this->updateAntennae(sf::Color(0,0,0), sf::Vector2f(10,10));
        this->updateLegs(3, sf::Color(0,0,0), sf::Vector2f(25,15));
        this->updateMandibles("Wasp", sf::Color(0,0,0), sf::Vector2f(5,7.5));
        this->extrudeRight("head", sf::Vector2f(1.5, 0));
        this->dimpleRight("thorax", 2.5f);
        this->extrudeLeft("thorax", sf::Vector2f(1, 0));
        this->dimpleRight("gaster", 2.5f);
        this->translatePartPoint("gaster", 28, sf::Vector2f(-5, 0));
        this->extrudeBottom("wingLeft0", sf::Vector2f(1, 5));
        this->extrudeBottom("wingLeft1", sf::Vector2f(1, 5));
        this->extrudeTop("wingRight0", sf::Vector2f(1, -5));
        this->extrudeTop("wingRight1", sf::Vector2f(1, -5));
        this->rotatePart("legLeft0", 30.0f);
        this->rotatePart("legRight0", -30.0f);
        this->rotatePart("legLeft2", -30.0f);
        this->rotatePart("legRight2", 30.0f);
        this->rotatePart("wingLeft0", -85.0f);
        this->rotatePart("wingLeft1", -85.0f);
        this->rotatePart("wingRight0", 85.0f);
        this->rotatePart("wingRight1", 85.0f);
        this->translateConnected("thorax", "gaster", 28, 10);
        this->translateConnected("wingLeft0", "thorax", 17, 3);
        this->translateConnected("wingRight0", "thorax", 3, 17);
        this->translateConnected("wingLeft1", "thorax", 17, 34);
        this->translateConnected("wingRight1", "thorax", 3, 22);
        this->translateConnected("head", "thorax", 28, 10);
        this->translateConnected("eyeRight0", "head", 16, 16);
        this->translateConnected("eyeLeft0", "head", 4, 4);
        this->translateConnected("legLeft0", "thorax", 0, 3);
        this->translateConnected("legRight0", "thorax", 0, 17);
        this->translateConnected("legLeft1", "thorax", 0, 1);
        this->translateConnected("legRight1", "thorax", 0, 19);
        this->translateConnected("legLeft2", "thorax", 0, 34);
        this->translateConnected("legRight2", "thorax", 0, 22);
        this->translateConnected("spot0", "head", 10, 10);
        this->translateConnected("spot1", "head", 1, 1);
        this->translateConnected("spot2", "thorax", 10, 10);
        this->translateConnected("spot3", "thorax", 1, 4);
        this->translateConnected("spot4", "thorax", 1, 2);
        this->translateConnected("spot5", "thorax", 1, 36);
        this->translateConnected("spot6", "thorax", 1, 33);
        this->translateConnected("spot7", "gaster", 10, 10);
        this->translateConnected("spot8", "gaster", 1, 6);
        this->translateConnected("spot9", "gaster", 1, 4);
        this->translateConnected("spot10", "gaster", 1, 2);
        this->translateConnected("spot11", "gaster", 1, 36);
        this->translateConnected("spot12", "gaster", 1, 34);
        this->translateConnected("spot13", "gaster", 2, 32);
        this->translateConnected("spot14", "gaster", 2, 30);
        this->translateConnected("mandibleLeft", "head", 0, 9);
        this->translateConnected("mandibleRight", "head", 0, 11);
        this->translateConnected("antennaeLeft", "head", 2, 6);
        this->translateConnected("antennaeRight", "head", 2, 14);
        this->updateOutline("eyeRight0");
        this->updateOutline("eyeLeft0");
        this->updateOutline("gaster");
        this->updateOutline("thorax");
        this->updateOutline("head");
        this->updateOutline("wingLeft0");
        this->updateOutline("wingRight0");
        this->updateOutline("wingLeft1");
        this->updateOutline("wingRight1");
        this->updateColors("Wasp");
        this->updateCenter("thorax");
        HASANTENNAE = true;
        HASEIGHTLEGS = false;
        HASEYES = true;
        HASHEAD = true;
        HASLEGS = true;
        HASLEGVISIBILITY = true;
        HASMANDIBLES = true;
        HASPETOILE = false;
        HASPOSTPETOILE = false;
        HASSPOTS = true;
        HASSPOTSONGASTER = true;
        HASSPOTSONTHORAX = true;
        HASSPOTSONWINGS = false;
        HASWINGS = true;
        HASTWOSETSWINGS = true;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = false;
        HASWINGVISIBILITY = true;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }
    else
    {
        this->m_type = "Spider";
        std::unordered_map<std::string, sf::Color> colors;
        colors["fill"] = sf::Color(64,64,64,192);
        colors["highlight"] = sf::Color(96,96,96,192);
        colors["outline"] = sf::Color(32,32,32,192);
        colors["eye"] = sf::Color(5,5,5);
        colors["eyeHighlight"] = sf::Color(0,0,128);
        this->setupColors(colors);
        this->update("eyeLeft0", sf::Vector2f(0.25,0.25));
        this->update("eyeRight0", sf::Vector2f(0.25,0.25));
        this->update("eyeLeft1", sf::Vector2f(0.25,0.25));
        this->update("eyeRight1", sf::Vector2f(0.25,0.25));
        this->update("eyeLeft2", sf::Vector2f(0.25,0.25));
        this->update("eyeRight2", sf::Vector2f(0.25,0.25));
        this->update("eyeLeft3", sf::Vector2f(0.25,0.25));
        this->update("eyeRight3", sf::Vector2f(0.25,0.25));
        this->update("gaster", sf::Vector2f(15,5));
        this->update("thorax", sf::Vector2f(7.5,7.5));
        this->updateLegs(4, sf::Color(75,75,75), sf::Vector2f(25,35));
        this->updateMandibles("Spider", sf::Color(75,75,75), sf::Vector2f(2.5,2.5));
        this->extrudeRight("thorax", sf::Vector2f(0.75, 0));
        this->dimpleLeft("thorax", 0.25f);
        this->dimpleRight("gaster", 0.5f);
        this->extrudeRightBottom("gaster", sf::Vector2f(0,0.5));
        this->extrudeRightTop("gaster", sf::Vector2f(0,-0.5));
        this->rotatePart("legLeft3", -30.0f);
        this->rotatePart("legRight3", 30.0f);
        this->rotatePart("legLeft2", -5.0f);
        this->rotatePart("legRight2", 5.0f);
        this->rotatePart("legLeft1", 5.0f);
        this->rotatePart("legRight1", -5.0f);
        this->rotatePart("legLeft0", 30.0f);
        this->rotatePart("legRight0", -30.0f);
        this->translateConnected("thorax", "gaster", 28, 10);
        this->translateConnected("mandibleLeft", "thorax", 0, 9);
        this->translateConnected("mandibleRight", "thorax", 0, 11);
        this->translateConnected("eyeRight0", "thorax", 10, 11, sf::Vector2f(-0.75,-0.5));
        this->translateConnected("eyeLeft0", "thorax", 10, 9, sf::Vector2f(-0.75,0.5));
        this->translateConnected("eyeRight1", "thorax", 10, 11, sf::Vector2f(-1.5,1));
        this->translateConnected("eyeLeft1", "thorax", 10, 9, sf::Vector2f(-1.5,-1));
        this->translateConnected("eyeRight2", "thorax", 10, 11, sf::Vector2f(-3,2));
        this->translateConnected("eyeLeft2", "thorax", 10, 9, sf::Vector2f(-3,-2));
        this->translateConnected("eyeRight3", "thorax", 10, 11, sf::Vector2f(-2.5,0));
        this->translateConnected("eyeLeft3", "thorax", 10, 9, sf::Vector2f(-2.5,0));
        this->translateConnected("legLeft0", "thorax", 0, 4);
        this->translateConnected("legRight0", "thorax", 0, 16);
        this->translateConnected("legLeft1", "thorax", 0, 2);
        this->translateConnected("legRight1", "thorax", 0, 18);
        this->translateConnected("legLeft2", "thorax", 0, 36);
        this->translateConnected("legRight2", "thorax", 0, 20);
        this->translateConnected("legLeft3", "thorax", 0, 33);
        this->translateConnected("legRight3", "thorax", 0, 23);
        this->updateOutline("eyeRight0");
        this->updateOutline("eyeLeft0");
        this->updateOutline("eyeRight1");
        this->updateOutline("eyeLeft1");
        this->updateOutline("eyeRight2");
        this->updateOutline("eyeLeft2");
        this->updateOutline("eyeRight3");
        this->updateOutline("eyeLeft3");
        this->updateOutline("gaster");
        this->updateOutline("thorax");
        this->updateCenter("thorax");
        this->updateColors("Spider");
        HASANTENNAE = false;
        HASEIGHTLEGS = true;
        HASEYES = true;
        HASHEAD = false;
        HASLEGS = true;
        HASLEGVISIBILITY = true;
        HASMANDIBLES = true;
        HASPETOILE = false;
        HASPOSTPETOILE = false;
        HASSPOTS = false;
        HASSPOTSONGASTER = false;
        HASSPOTSONTHORAX = false;
        HASSPOTSONWINGS = false;
        HASWINGS = false;
        HASTWOSETSWINGS = false;
        HASTHREESETSWINGS = false;
        HASTOPWINGS = false;
        HASWINGVISIBILITY = false;
        HASVISIBILITY = true;
        INITIALIZED = true;
    }

    return;
}

} // end namespace Insect